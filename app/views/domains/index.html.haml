- if @server
  - page_title << @server.name
- page_title << "Domains"

- if @server
  = render 'servers/sidebar', :active_server => @server
  = render 'servers/header', :active_nav => :domains
  = render 'nav', :active_nav => :domains
- else
  .pageHeader
    %h1.pageHeader__title
      %span.pageHeader__titlePrevious
        = @organization.name
        &rarr;
      Domains
  = render 'organizations/nav', :active_nav => :domains

.pageContent.pageContent--compact
  .u-margin
    .u-center.u-margin-2x
      = link_to "Add new domain", [:new, organization, @server, :domain], :class => "button button--positive"
      = link_to "Verify All", [:verify_all, organization, @server, :domains], :method => :post, :class => "button button--neutral", :data => {:confirm => "This will attempt to verify all domains with DNS records that are not fully set up. Continue?"}
      = link_to "Export as CSV", [:export, organization, @server, :domains], :class => "button button--neutral"
    
    .pageContent__searchForm
      = form_tag [organization, @server, :domains], method: :get, class: 'searchForm' do
        .searchForm__input
          = text_field_tag :search, @search, class: 'input input--text', placeholder: "Search domains..."
          = submit_tag "Search", class: 'button button--small'
        - if @search.present? || @filter.present?
          .searchForm__reset
            = link_to "Clear all filters", [organization, @server, :domains], class: 'u-link'
            
    .pageContent__filters
      %ul.filterTabs
        %li.filterTabs__item
          = link_to "All Domains", url_for(params.permit(:search).merge(filter: nil)), class: ['filterTabs__link', @filter.nil? ? 'is-active' : '']
        %li.filterTabs__item  
          = link_to "Unverified", url_for(params.permit(:search).merge(filter: 'unverified')), class: ['filterTabs__link', @filter == 'unverified' ? 'is-active' : '']
        %li.filterTabs__item
          = link_to "With Issues", url_for(params.permit(:search).merge(filter: 'issues')), class: ['filterTabs__link', @filter == 'issues' ? 'is-active' : '']
        %li.filterTabs__item
          = link_to "Verified", url_for(params.permit(:search).merge(filter: 'verified')), class: ['filterTabs__link', @filter == 'verified' ? 'is-active' : '']

  - if @domains.empty?
    .noData.noData--clean
      - if @search.present?
        %h2.noData__title No domains found matching "#{@search}".
        %p.noData__text
          Try a different search term or clear your search to see all domains.
      - elsif @filter.present?
        - case @filter
        - when 'unverified'
          %h2.noData__title No unverified domains found.
          %p.noData__text
            All domains have been verified! 
            = link_to "View all domains", [organization, @server, :domains], class: 'u-link'
        - when 'issues'
          %h2.noData__title No domains with DNS issues found.
          %p.noData__text
            All domains have proper DNS configuration! 
            = link_to "View all domains", [organization, @server, :domains], class: 'u-link'
        - when 'verified'
          %h2.noData__title No verified domains found.
          %p.noData__text
            You need to verify your domains before you can use them.
            = link_to "View all domains", [organization, @server, :domains], class: 'u-link'
      - else
        %h2.noData__title There are no domains for this server.
        %p.noData__text
          To send & receive messages you need to add & verify the domain you wish to send/receive
          messages to/from. Add your domain below to get started.

  - else
    - if @total_pages > 1
      = render 'shared/domains_pagination', page: @page, total_pages: @total_pages, domains: @domains, total_domains: @total_domains
    
    %ul.domainList.u-margin
      - for domain in @domains
        %li.domainList__item
          .domainList__details
            %p.domainList__name
              = link_to domain.name, [:setup, organization, @server, domain]
              - if domain.use_for_any?
                %span.label.label--blue Any
            %ul.domainList__checks
              - if domain.spf_status == 'OK'
                %li.domainList__check.domainList__check--ok SPF
              - elsif domain.spf_status.nil?
              - else
                %li.domainList__check.domainList__check--warning{:title => domain.spf_error}= link_to "SPF", [:setup, organization, @server, domain]

              - if domain.dkim_status == 'OK'
                %li.domainList__check.domainList__check--ok DKIM
              - elsif domain.dkim_status.nil?
              - else
                %li.domainList__check.domainList__check--warning{:title => domain.dkim_error}= link_to "DKIM", [:setup, organization, @server, domain]

              - if domain.mx_status == 'OK'
                %li.domainList__check.domainList__check--ok MX
              - elsif domain.mx_status.nil?
              - else
                %li.domainList__check.domainList__check--neutral-cross{:title => domain.mx_error}= link_to "MX", [:setup, organization, @server, domain]

              - if domain.return_path_status == 'OK'
                %li.domainList__check.domainList__check--ok Return Path
              - elsif domain.return_path_status.nil?
              - elsif domain.return_path_status == 'Missing'
                %li.domainList__check.domainList__check--neutral{:title => domain.return_path_error}= link_to "Return Path", [:setup, organization, @server, domain]
              - else
                %li.domainList__check.domainList__check--warning{:title => domain.return_path_error}= link_to "Return Path", [:setup, organization, @server, domain]

          %ul.domainList__properties
            - if domain.verified?
              %li.domainList__verificationTime Verified on #{domain.verified_at.to_fs(:long)}
            - else
              %li= link_to "Verify this domain", [:verify, organization, @server, domain], :class => "domainList__verificationLink"
            %li.domainList__links
              - if domain.verified?
                = link_to "DNS setup", [:setup, organization, @server, domain]
              = link_to "Delete", [organization, @server, domain], :remote => :delete, :method => :delete, :data => {:confirm => "Are you sure you wish to remove this domain?", :disable_with => "Deleting..."}, :class => 'domainList__delete'

    - if @total_pages > 1
      = render 'shared/domains_pagination', page: @page, total_pages: @total_pages, domains: @domains, total_domains: @total_domains

